/*
 * This file is part of creative, licensed under the MIT license
 *
 * Copyright (c) 2021-2023 Unnamed Team
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package team.unnamed.creative.model;

import net.kyori.examination.Examinable;
import net.kyori.examination.ExaminableProperty;
import org.jetbrains.annotations.ApiStatus;
import org.jetbrains.annotations.Contract;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import team.unnamed.creative.base.CubeFace;
import team.unnamed.creative.base.Vector2Float;
import team.unnamed.creative.base.Vector4Float;
import team.unnamed.creative.texture.TextureUV;

import java.util.stream.Stream;

/**
 * Defines the properties of a {@link CubeFace}
 * from a {@link Element}
 *
 * @since 1.0.0
 */
public interface ElementFace extends Examinable {

    /**
     * The Minecraft UV unit, UV coordinates in Minecraft
     * actually use a 0-16 scale, so this constant is used
     * to convert from 0-1 to 0-16.
     *
     * @since 1.0.0
     * @deprecated Should not be exposed, moved to serializer
     */
    @Deprecated
    @ApiStatus.ScheduledForRemoval(inVersion = "2.0.0")
    float MINECRAFT_UV_UNIT = 16F;

    int DEFAULT_ROTATION = 0;
    int DEFAULT_TINT_INDEX = -1;

    /**
     * Creates a new {@link ElementFace} instance from
     * the provided values
     *
     * @param uv        The texture area to use, will be automatically
     *                  generated by the client if not set
     * @param texture   The texture name
     * @param cullFace  The element face cull face
     * @param rotation  The face rotation, must be multiple
     *                  of 90 and be less than 360
     * @param tintIndex The face tint index
     * @return The recently created {@link ElementFace} instance
     * @since 1.1.0
     */
    static @NotNull ElementFace face(final @Nullable TextureUV uv, final @NotNull String texture, final @Nullable CubeFace cullFace, final int rotation, final int tintIndex) {
        return new ElementFaceImpl(uv, texture, cullFace, rotation, tintIndex);
    }

    /**
     * Creates a new element face builder instance.
     *
     * @return A new builder instance
     * @since 1.1.0
     */
    static @NotNull Builder face() {
        return new ElementFaceImpl.BuilderImpl();
    }

    /**
     * Creates a new {@link ElementFace} instance from
     * the provided values
     *
     * @param uv        The texture area to use, will be automatically
     *                  generated by the client if not set
     * @param texture   The texture name
     * @param cullFace  The element face cull face
     * @param rotation  The face rotation, must be multiple
     *                  of 90 and be less than 360
     * @param tintIndex The face tint index
     * @return The recently created {@link ElementFace} instance
     * @since 1.0.0
     * @deprecated Use {@link #face(TextureUV, String, CubeFace, int, int)} instead
     */
    @Deprecated
    @ApiStatus.ScheduledForRemoval(inVersion = "2.0.0")
    static @NotNull ElementFace of(final @Nullable Vector4Float uv, final @NotNull String texture, final @Nullable CubeFace cullFace, final int rotation, final int tintIndex) {
        return face(uv == null ? null : TextureUV.uv(uv.x(), uv.y(), uv.x2(), uv.y2()), texture, cullFace, rotation, tintIndex);
    }

    /**
     * Static factory method for creating a new
     * instance of our builder implementation,
     * which eases the creation of {@link ElementFace}
     * instances
     *
     * @return A new builder instance
     * @since 1.0.0
     * @deprecated Use {@link #face()} instead
     */
    @Deprecated
    @ApiStatus.ScheduledForRemoval(inVersion = "2.0.0")
    static @NotNull Builder builder() {
        return new ElementFaceImpl.BuilderImpl();
    }

    /**
     * Returns the area of the texture to
     * use according to the scheme [x1, y1, x2, y2]
     *
     * <p>All components are always between 0 and
     * 1 and then converted to 0-16 (Minecraft UV)
     * when creating the resource pack</p>
     *
     * <p>If the numbers of x1 and x2 are swapped
     * the texture flips</p>
     *
     * <p>UV is optional, and if not supplied it automatically
     * generates based on the element's position.</p>
     *
     * @return The texture area to use
     * @since 1.0.0
     * @deprecated Use {@link #uv0()} instead
     */
    @Deprecated
    @ApiStatus.ScheduledForRemoval(inVersion = "2.0.0")
    default @Nullable Vector4Float uv() {
        final TextureUV uv = uv0();
        if (uv == null) {
            return null;
        } else {
            return new Vector4Float(uv.from().x(), uv.from().y(), uv.to().x(), uv.to().y());
        }
    }

    /**
     * Returns the area of the texture to use.
     *
     * <p>If the UV is not specified, it will be automatically
     * generated based on the element's position and face.</p>
     *
     * @return The texture area to use
     * @since 1.1.0
     * @deprecated Will be renamed to "uv" in 2.0.0
     */
    @Deprecated
    @ApiStatus.ScheduledForRemoval(inVersion = "2.0.0")
    @Nullable TextureUV uv0();

    /**
     * Returns this face's texture in variable
     * form prepended with a "#"
     *
     * @return The face texture
     * @since 1.0.0
     */
    @NotNull String texture();

    /**
     * Returns whether a face does not need to be rendered
     * when there is a block touching it in the specified
     * position. It also determines the side of the block to
     * use the light level from for lighting the face
     *
     * @return The element cull face
     * @since 1.0.0
     */
    @Nullable CubeFace cullFace();

    /**
     * Returns this face texture rotation, it rotates the texture
     * by the specified number of degrees. Can be 0, 90, 180, or
     * 270.
     *
     * <p>Rotation does not affect which part of the texture is
     * used. Instead, it amounts to permutation of the selected
     * texture vertexes (selected implicitly, or explicitly though
     * uv)</p>
     *
     * @return The face texture rotation
     * @since 1.0.0
     */
    int rotation();

    @Override
    @NotNull Stream<? extends ExaminableProperty> examinableProperties();

    @Override
    String toString();

    int tintIndex();

    /**
     * Builder implementation for creating
     * {@link ElementFace} instances
     *
     * @since 1.0.0
     */
    interface Builder {

        /**
         * Sets the texture area to use, will be automatically
         * generated by the client if not set.
         *
         * @param uv The texture area to use
         * @return This builder instance
         * @since 1.1.0
         */
        @Contract("_ -> this")
        @NotNull Builder uv(final @Nullable TextureUV uv);

        /**
         * Sets the texture area to use, will be automatically
         * generated by the client if not set.
         *
         * @param uv The texture area to use
         * @return This builder instance
         * @since 1.0.0
         * @deprecated Use {@link #uv(TextureUV)} instead
         */
        @Deprecated
        @ApiStatus.ScheduledForRemoval(inVersion = "2.0.0")
        @Contract("_ -> this")
        default @NotNull Builder uv(final @Nullable Vector4Float uv) {
            return uv(uv == null ? null : TextureUV.uv(
                    new Vector2Float(uv.x(), uv.y()),
                    new Vector2Float(uv.x2(), uv.y2())
            ));
        }

        /**
         * Sets the texture id to use, it must be
         * prepended with a "#".
         *
         * @param texture The texture id
         * @return This builder instance
         * @since 1.0.0
         */
        @Contract("_ -> this")
        @NotNull Builder texture(final @NotNull String texture);

        /**
         * Sets the element face cull face, it determines
         * whether a face does not need to be rendered
         * when there is a block touching it in the specified
         * position. It also determines the side of the block to
         * use the light level from for lighting the face.
         *
         * @param cullFace The element face cull face
         * @return This builder instance
         * @since 1.0.0
         */
        @Contract("_ -> this")
        @NotNull Builder cullFace(final @Nullable CubeFace cullFace);

        /**
         * Sets the face rotation, it rotates the texture
         * by the specified number of degrees. Can be 0, 90, 180, or
         * 270.
         *
         * <p>Rotation does not affect which part of the texture is
         * used. Instead, it amounts to permutation of the selected
         * texture vertexes (selected implicitly, or explicitly though
         * uv)</p>
         *
         * @param rotation The face rotation
         * @return This builder instance
         * @since 1.0.0
         */
        @Contract("_ -> this")
        @NotNull Builder rotation(final int rotation);

        /**
         * Sets the face tint index, it determines whether to tint
         * the texture using a hardcoded tint index.
         *
         * @param tintIndex The face tint index
         * @return This builder instance
         * @since 1.0.0
         */
        @Contract("_ -> this")
        @NotNull Builder tintIndex(final int tintIndex);

        /**
         * Finishes building the {@link ElementFace}
         * instance with the previously set values
         *
         * @return The face instance
         * @since 1.0.0
         */
        @NotNull ElementFace build();

    }

}
